from datetime import datetime
from urllib import request

from aiogram.fsm.context import FSMContext
from aiogram import Dispatcher, Bot
from aiogram.types import ContentType
from aiogram.types import CallbackQuery, Message, User
from aiogram_dialog import Dialog, DialogManager, StartMode, Window
from aiogram_dialog.widgets.kbd import Button, SwitchTo, Back, Next
from aiogram_dialog.widgets.text import Format, Const, List
from aiogram_dialog.widgets.input import TextInput, ManagedTextInput, MessageInput

from src.config import settings
from src.database.connect import DataBase
from src.database.models import Specialist
from src.handlers.registration.registarateion_state import RegistrationDialog
from aiogram.types import CallbackQuery

from src.log_config import *
logger = logging.getLogger(__name__)

IMAGES = 'src/images'


async def registration(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    await dialog_manager.switch_to(RegistrationDialog.name)


async def back_to_start(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    await dialog_manager.done()



window_offer_info = Window(
                Format("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å \n–∏ –∫–ª–∏–µ–Ω—Ç—ã —Å–º–æ–≥—É—Ç –≤–∞—Å –Ω–∞–∏ÃÜ—Ç–∏!"),
                Button(Const("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"), id="registration", on_click=registration),
                Button(Const("–ù–∞–∑–∞–¥"), id="back_start", on_click=back_to_start),
                state=RegistrationDialog.offer_message,
)



async def save_name(message: Message, widget: ManagedTextInput, dialog_manager: DialogManager, text: str):
    dialog_manager.dialog_data['name'] = widget.get_value()
    print(dialog_manager)
    #await dialog_manager.switch_to(RegistrationDialog.phone)
    await dialog_manager.switch_to(RegistrationDialog.photo)


window_name = Window(
                Format("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"),
                TextInput(id="input_name",
                          type_factory=str,
                          on_success=save_name
                          ),
                Back(Const("üîô –ù–∞–∑–∞–¥"), id="back_offer"),
                state=RegistrationDialog.name
)


async def save_phone(message: Message, widget: ManagedTextInput, dialog_manager: DialogManager, text: str):
    dialog_manager.dialog_data['phone'] = message.text
    await dialog_manager.switch_to(RegistrationDialog.email)

window_phone = Window(
                Format("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"),
                TextInput(id="input_phone",
                          type_factory=str,
                          on_success=save_phone
                          ),
                Back(Const("üîô –ù–∞–∑–∞–¥"), id="back_offer"),
                state=RegistrationDialog.phone,
)


async def save_email(message: Message, widget: ManagedTextInput, dialog_manager: DialogManager, text: str):
    dialog_manager.dialog_data['email'] = message.text
    await dialog_manager.switch_to(RegistrationDialog.specialty)

window_email = Window(
                Format("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email"),
                TextInput(id="input_email",
                          type_factory=str,
                          on_success=save_email
                          ),
                Back(Const("üîô –ù–∞–∑–∞–¥"), id="back_offer"),
                Next(Const("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"), id="skip"),
                state=RegistrationDialog.email,
)



async def save_specialty(message: Message, widget: ManagedTextInput, dialog_manager: DialogManager, text: str):
    dialog_manager.dialog_data['specialty'] = message.text
    await dialog_manager.switch_to(RegistrationDialog.about)

window_specialty = Window(
                Format("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å"),
                TextInput(id="input_specialty",
                          type_factory=str,
                          on_success=save_specialty
                          ),
                Back(Const("üîô –ù–∞–∑–∞–¥"), id="back_offer"),
                state=RegistrationDialog.specialty,
)



async def save_about(message: Message, widget: ManagedTextInput, dialog_manager: DialogManager, text: str):
    dialog_manager.dialog_data['about'] = message.text
    await dialog_manager.switch_to(RegistrationDialog.photo)

window_about = Window(
                Format("–ù–∞–ø–∏—à–∏—Ç–µ –æ —Å–µ–±–µ"),
                TextInput(id="input_about",
                          type_factory=str,
                          on_success=save_about
                          ),
                Back(Const("üîô –ù–∞–∑–∞–¥"), id="back_offer"),
                state=RegistrationDialog.about,
)


async def save_photo(message: Message, widget: MessageInput, dialog_manager: DialogManager):
    dialog_manager.dialog_data['photo'] = message.photo[-1].file_id
    await dialog_manager.switch_to(RegistrationDialog.confirm)


window_photo = Window(
                Format("–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ"),
                MessageInput(id="input_photo",
                          func=save_photo,
                          content_types=ContentType.PHOTO
                          ),
                Back(Const("üîô –ù–∞–∑–∞–¥"), id="back_offer"),
                Next(Const("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"), id="skip"),
                state=RegistrationDialog.photo,
)


window_confirm = Window(
    Format("–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É"),
    Format("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—è –∑–∞—è–≤–∫—É, –≤—ã –¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"),
    #TODO Link to terms
    Back(Const("üîô –ù–∞–∑–∞–¥"), id="back_offer"),
    Next(Const("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"), id="confirm"),
    state=RegistrationDialog.confirm
)


async def getter_answer(dialog_manager: DialogManager, bot: Bot, event_from_user: User, **kwargs):
    try:
        user_id = event_from_user.id
        img_telegram_id = dialog_manager.dialog_data.get('photo')
        local_path = f"{IMAGES}/{user_id}.jpg"

        if img_telegram_id:
            await bot.download(img_telegram_id, destination=f"{settings.path_root}/{local_path}")
        else:
            local_path = None

        specialist = Specialist(
            name=dialog_manager.dialog_data.get('name', 'empty'),
            phone=dialog_manager.dialog_data.get('phone', 'empty'),
            email=dialog_manager.dialog_data.get('email'),
            specialty=dialog_manager.dialog_data.get('specialty', 'empty'),
            about=dialog_manager.dialog_data.get('about', 'empty'),
            photo_telegram=img_telegram_id,
            photo_local=local_path,
            created_at=datetime.now()
        )

        db = DataBase()

        async with db.get_session()() as session:
            async with session.begin():
                session.add(specialist)
    except Exception as e:
        logger.error(f"Error in getter_answer. bot_id: {event_from_user.bot.id}. {e}")

    return {}


window_answer = Window(
                Format("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! \n–ü–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π –≤ –∫–∞—Ç–∞–ª–æ–≥–µ!"),
                Button(Const("Ok"), id="offer_ok", on_click=back_to_start),
                state=RegistrationDialog.answer,
                getter=getter_answer
)
